<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <!--视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--urlparten为 / 表示拦截所有，静态资源会有问题，使用tomcat的默认servlet处理静态资源请求-->
    <!--下面两种方式任何一种都行 这两种方式必须加注解驱动，否则@RequestMapping不生效-->
    <mvc:default-servlet-handler/>
    <!--<mvc:resources mapping="/images/**" location="/images/"/>-->
    <!--<mvc:resources mapping="/js/**" location="/js/"/>-->

    <mvc:annotation-driven/>

    <!--扫包-->
    <context:component-scan base-package="com.chengzi.shiro.spring.controller"/>

    <!--全局异常处理-->
    <bean class="com.chengzi.shiro.spring.exception.MyCustomException"/>

    <!--配置拦截器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.chengzi.shiro.spring.intercepter.MyIntercepter"/>
        </mvc:interceptor>
    </mvc:interceptors>



    <!--整合shiro注解支持需要配置-->
    <!--
            proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。如果proxy-target-class
            属性值被设置为true，那么基于类的代理将起作用（这时需要cglib库）。
            如果proxy-target-class属值被设置为false或者这个属性被省略，那么标准的JDK 基于接口的代理
     -->
    <aop:config proxy-target-class="true"/>


    <!--注解需要基于切面aop实现，这里需要配置bean的后置处理器-->
    <bean class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--advisor,需要将shiro核心的安全管理器配置进去-->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="defaultWebSecurityManager"/>
    </bean>

    <!-- 开启aop注解方式，此步骤s不能少，这样java类中的aop注解才会生效 -->
    <aop:aspectj-autoproxy/>
</beans>